#summary Release Notes for the PHP-to-Scala Migration Helper
#labels Featured,Phase-Implementation

= Introduction =

Yes, it works! The test_1 (computation of digits of PI - from the Computer Benchmarks Game) is now fully functional. That means, successful fully automated conversion of test_1.php to test_1.scala, and successful execution of test_1.scala with the equivalent results as the original PHP code! The primary goal of producing clean, readable Scala code has been met. The secondary goal of PHP compatibility remains surprisingly intact (using reflection to dynamically resolve objects makes it possible to support "duck-typing" and untyped references). The tertiary goal of high performance is all but unmet at this point.

==Features planned for future releases==
 * Pretty-print (auto-indent) the Scala output
 * Performance improvements
 * Support for function type-hints - that should also help performance
 * Type-inference based on global static analysis
 * Complete integration with Quercus - still missing I/O, ob_handler, eval(), etc.
 * Clean-up the "$" types with well thought-out behaviors; currently it's a bit ad-hoc.

==New Features in v0.4 (2010-04-22)==
 * Success! This is the first release where the PI Digit Generator (test_1) works!
 * *This qualifies as an "Alpha" release! It is sufficiently functional now to encourage volunteers to try it out and contribute their own improvements :)*
 * Finished up the basic integration with Quercus. A total of 1,054 (over one thousand) standard PHP functions are now integrated and available for use. What remains now are the functions that could not be handled by the automatic build script due to unusual signatures, duplicate names, etc and had to be manually excluded (see mklib.sh).
 * Finished up the basic Scala-friendly "php-like" types ($int, $str, $obj, $val, and $null) which provide implicit conversions and other syntactic niceties that keep the generated Scala code free of clutter.
 * Introduced "idiomatic" dynamic resolution operators ~> for variables and ~& for functions (note that "~>" had to be chosen over "->" due to Scala's operator precedence rules)
 * First benchmark: test_1.php 200 runs in 0.7 seconds; test_1.scala in 16 seconds. Yes it is surprisingly slow, but absolutely no attempt has been made so far to investigate the reason for the slowness.
 * Use static binding ("." instead of "~>") for references to _this_. This is more aesthetically pleasing but actually provided no speed gain - reflection is pretty fast! 
 * String variable interpolation syntax is working too now

==New Features in v0.3 (2010-04-18)==
 * This was a rather buggy interim release. Nothing works.

==New Features in v0.2 (2010-04-16)==
 * Begun integration with the Quercus run-time (full PHP library implementation in Java)
 * Right now everything compiles fine but only test_0.php (Hello World) runs successfully
 * Successful compilation of test_1.scala!!! It still doesn't run, as the Quercus integration is unfinished
 * The conversion of constructors now is nice and clean, although not "idiomatic Scala"
 * Renamed php.value to '$', to identify generic PHP variables.
 * Primitive type-inference (everything is a '$', but at least it is declared)
 * Implemented implicit conversions in php.scala
 * Improved type inference - variables assigned to an integer are declared var:Int

==Features implemented in v0.1 (2010-04-12)==
 * Use the built-in PHP tokenizer for correctness (should handle complex scripts)
 * Recursive "look-ahead" parser avoids an AST, this helps preserve code structure.
 * Breaking up of for(;;) loops into scala while() loops is working.
 * Use correct syntax for function declaration (including no '=' for non-returning)
 * Removal of dollar signs from all variables
 * Change of array index square brackets to parens.
 * Change of object operator -> to '.'
 * Inline HTML for now just invokes an "output" function with triple-quoted string.
 * Correct handling of command-syntax (e.g. print) by adding parenthesis.
 * File scope becomes an object scope; this should help a later "aliasing" scheme.