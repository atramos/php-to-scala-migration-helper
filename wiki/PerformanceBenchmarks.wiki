#labels Featured,Phase-QA
# php-to-scala performance testing results, optimizations, and other details

= Benchmark 2: Roman Number Generator =

 * Parameters used: 5000 100 (5,000 repetitions of 100 roman numerals)
 * PHP time: 55 seconds
 * Scala time: 51 seconds!!

{{{
     [java]  78.4%     9  +  1704    php.script.stringToPhp
     [java]   2.2%    48  +     0    com.caucho.quercus.env.LargeStringBuilderValue.append
     [java]   2.1%    15  +    30    test_2_php$$anonfun$dec2roman$1$2.apply
     [java]   1.9%    31  +    10    com.caucho.quercus.env.ArrayValueImpl.createEntry
     [java]   1.1%     4  +    19    php.array.foreach
     [java]   1.1%    14  +     9    test_2_php$.dec2roman$1
}}}

 * When run with parms [100 100]... The scala version is 3.2x slower than the PHP.
 * 34% of time is spent in php.script.stringToPhp

= Test 1 (slow): PI Digit Generator =

== Benchmark 1: PI Digit Generator ==

The first benchmark test performed on 4/22/2010 produced a surprising result:
 * test_1.php runs in 0.7 seconds
 * test_1.scala in 16 seconds

Both were run using a "200" parameter for the number of PI Digits.

These results were surprising. Then I ran the test with -Xprof, and the result of that was even MORE surprising!

== Surprise: The Scala code is actually fast! The Java libraries are slow. ==

But Java's BigInteger library is mind-bogglingly slow. And due to dumb luck, the first arbitrarily selected performance test (PI Digits) is very bigmath-intensive. Apparently was not the first to [http://stackoverflow.com/questions/611732/what-to-do-with-java-bigdecimal-performance discover this].

These are the results from -Xprof (with -server and 300 digits):
 * 63.8% of the run time is spent in java.math.MutableBigInteger.divide
 * 24.6% is spent on other Big Math library functions, for a total of 88.4% of the run time
 * The JIT does not compile java.math.BigInteger.toString until it's been invoked 171 times
 * Reflection is not a significant source of overhead (less than 0.1% of time)
 * Only about 3% of time is spent on "wasteful" conversions among strings and php types
 * Due to the relative short run, another 3% or so is spent on class-loading.
 * That leaves about 5% of time to "other stuff".

The bottomline: It should be reasonable to expect other benchmarks will be significantly faster - potentially 20x to 50x faster, making php-to-scala generated Scala code at least as fast as PHP, and possibly 2x to 3x faster.